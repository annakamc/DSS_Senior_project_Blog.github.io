---
title: "Real-Life Examples of Data Cleaning with Regex"
author: "Annaka McClelland"
date: "2025-03-03"
categories: [Real-World,Cast Iron,IEEE]
format:
  html:
    toc: true
    code-fold: true
    code-tools: true
---

Data cleaning is one of the most important‚Äîand often overlooked‚Äîsteps in any data workflow. In both industry and real life, clean data leads to clearer insights, better decisions, and stronger outcomes. Thanks for joining me on this journey into real-world examples and practical industry level tips!

![](woman_regex_pic.png){width=50%}


> **Regex isn't just for text matching‚Äîit's a powerhouse for real-world impact.** From cleaning AWS Textract output to powering dashboards and machine learning models, regex plays a vital role in transforming raw text into structured, actionable insights. Let‚Äôs explore how I used it to help save my company over $100K and handle 50+ million rows of data (and growing!).

---

## Project Background

I was tasked with extracting data from complex engineering PDF drawings using **AWS Textract**, and turning the output into a **clean, relational dataframe**. The goal? Meet the diverse needs of downstream teams‚Äîwhether for **machine learning models**, **dashboards**, or **reporting insights**‚Äîby making messy unstructured text clean and usable.

To do this, I built a **modular data cleaning and transformation flow** in **Databricks** using **PySpark**, powered by a growing suite of custom regex functions.

---

## Regex Flow Overview

This is the end-to-end pipeline I designed, which this blog will break down (with a visual coming soon!):

**ingest ‚Üí explode ‚Üí parse ‚Üí parse...n ‚Üí compile ‚Üí format ‚Üí productionize**

- **Ingest**: Read AWS Textract output from S3 into Databricks
- **Explode**: Flatten nested JSON text objects into rows
- **Parse**: Extract key patterns or features with regex
- **Parse...n**: Repeat parsing steps as needed, based on logic layers
- **Compile**: Append raw parsing outputs into a unified staging table
- **Format**: Clean, reformat, and standardize columns for EDL ingestion
- **Productionize**: Load into **EDL current** for dashboards, ML, and analytics

---

## The Real Star: `parse...n`

The core value of this project is in the **regex parsing layers**:

- üèóÔ∏è **Enterprise standards** are identified and extracted using flexible pattern matchers
- üßº **Filters** clean up misreads or irrelevant tokens
- üß† My favorite step: I built a PySpark function to **clean, label, and enhance** the extracted data
    - Adds a `description`
    - Outputs cleaned `standard_text`
    - Adds contextual details like `coating_type`, `layer_type`, etc.
- üîÑ Then I used `fx_feature_format` to **collapse** the cleaned results into one clean output ready for the next step

---

## Code Example


### Function Purpose

The `fx_find_paint_standards` function is designed to clean and extract valuable engineering metadata‚Äîspecifically paint callouts‚Äîfrom AWS Textract output. These paint codes are often misread and inconsistently formatted, so this PySpark function applies rigorous pattern matching using regular expressions to pull out standardized insights.

---

### Step-by-Step Breakdown

---

#### Example Data

```python
example_list = ["zz", "x3", "ki"]
example_dictionary = {
  "zz": "Black primer",
  "x3": "Durability level 3",
  "ki": "Blue gloss coat"
}
```

```python
color_mapping_expr = F.create_map([F.lit(x) for x in itertools.chain(*color_mapping.items())])
```

**Purpose:** Creates a Spark `MapType` expression from a Python dictionary (`color_mapping`) so it can be used to map color codes to color names.

```python
row_count = df.count()
```

**Purpose:** Ensures the function only runs if there are rows in the DataFrame.

---

### Step: Topcoat Color Extraction

```python
.withColumn('topcoat_color_code',
  F.when(F.col('text_lower').rlike(r'[ji1][a-z]{2}f[\d|i]\dkii'), ...)
```

This block determines what the topcoat color code is based on:

- **`rlike(r'[ji1][a-z]{2}f[\d|i]\dkii')`**: Regex searches for misread variants of the enterprise standard.
- **`substring(..., loc + std_len, 2)`**: Grabs 2 characters after the standard to find color code.

#### Regex Breakdown:

- `jdmf[\d|i]\dkii`: Matches strings like `jdmf14kii` or `jdmfi4kii`, accounting for misreads like `i` instead of `1`.
- `substring(..., 2)`: Extracts potential two-character color code like `zz`.

---

### Step: Temperature Classification

```python
.withColumn('temp_class',
  F.when(F.col('topcoat_color_code').isNull(), None)
  .when(F.trim(F.expr("substring(... + topcoat_color_code_len, 1)"))
```

This block identifies the temperature class:

- Checks for common misreads like `(`, `l`, `/`, `\` interpreted as `1`
- Extracts the next character after topcoat color to assign class

---

### Step: Physical Property Classification

```python
.withColumn('physical_property_class',
  F.when(F.col('temp_class').isNull(), None)
```

If the temperature class is defined, we then extract and classify the physical property using `a` or `b` as per JDMF14 standard.

#### Description Mapping:

- **`a`**: High-visibility parts (e.g., visible under normal operation)
- **`b`**: Low-visibility or non-critical parts

---

### Step: Primer Color Extraction

```python
.withColumn('primer_color_code',
  F.when(substring(...).isin('77', 'z7', '7z'), 'zz')
```

Primer codes are also often misread and need correcting:

- Fixes `7z`, `z7` to `zz`
- Pulls primer color from after the topcoat color + temperature + physical property code

#### Regex Highlight:

- `jdmf14[a-z]{1,2}[0-4][a|b][\+|\-|\=].` matches valid JDMF14 callouts with a primer code

---

### Step: Additional Requirements

```python
.withColumn('additional_requirements',
  F.when(...).otherwise(F.trim(F.col('additional_requirements_prep')))
```

This part:

- Captures trailing codes like `x3`, `x5`, `x1`
- Handles common OCR misreads: `xl` = `x1`, `xt` = `x7`, `xo` = `x0`
- Cleans up noisy strings that don‚Äôt conform to expected patterns

#### Regex Breakdown:

- `(?<!x)([0-7])|[^x|x0|x1|x2|x3|x4|x5|x6|x7]`: Matches invalid characters outside the `x0`‚Äì`x7` pattern group
- `[(|c](.*?)\)`: Captures data inside parentheses like `(x3,x5)`

---

### Additional Highlights

#### Fixing Color Misreads:
```python
.withColumn('topcoat_color_desc', color_mapping_expr[F.col('topcoat_color_code')])
```
Links each color code like `zz`, `ki`, `h2` to readable names like ‚ÄúBlack primer‚Äù or ‚ÄúBlue gloss coat.‚Äù

#### Final Formatting and Output:
```python
.select(...).withColumns({...})
```
Ensures:
- All fields are either null or cleaned
- Values are deduplicated by CAD part
- Output includes page number and coordinates for tracing source data

---

### Summary

This function turns messy engineering paint callouts into clean, structured features ready for use in:

- Machine learning
- Operational dashboards
- Standards tracking

Regex is the **workhorse** behind the curtain‚Äîhandling OCR misreads, non-standard delimiters, and cascading dependencies.

Let me know if you want this packaged for a GitHub wiki or auto-generated with docs!

